{
  "version": 3,
  "sources": ["src/app/core/auth/update-password/update-password.component.ts", "src/app/core/auth/update-password/update-password.component.html"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\r\nimport { InputFieldComponent } from '../../../shared/components/input-field/input-field.component';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { path } from '../../../models/routes.model';\r\nimport { ActivatedRoute, Route, Router } from '@angular/router';\r\nimport { PasswordValidator } from '../../../helpers/password-validators';\r\nimport { AuthService } from '../services/auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-update-password',\r\n  standalone: true,\r\n  imports: [InputFieldComponent, ReactiveFormsModule],\r\n  templateUrl: './update-password.component.html',\r\n  styleUrl: './update-password.component.scss',\r\n})\r\nexport class UpdatePasswordComponent implements OnInit {\r\n  private LOGIN = `/${path.LOGIN}`;\r\n\r\n  formGroup: FormGroup;\r\n  errorMessage = '';\r\n  token: string | null = null;\r\n  email: string | null = null;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    private authService: AuthService\r\n  ) {\r\n    this.formGroup = this.formBuilder.group({\r\n      password: ['', Validators.required],\r\n      confirm_password: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.token = this.activatedRoute.snapshot.paramMap.get('token');\r\n    this.activatedRoute.queryParamMap.subscribe((params) => {\r\n      // this.email = params.get('email');\r\n      const encodedEmail = params.get('email');\r\n      this.email = encodedEmail ? decodeURIComponent(encodedEmail) : null;\r\n    });\r\n\r\n    console.log('Token:', this.token);\r\n    console.log('Email:', this.email);\r\n  }\r\n\r\n  onResetPassword() {\r\n    let errormsg = '';\r\n    console.log('reset password');\r\n\r\n    const password = this.formGroup.get('password')?.value;\r\n    const confirmPassword = this.formGroup.get('confirm_password')?.value;\r\n    if (this.formGroup.invalid) {\r\n      this.formGroup.markAllAsTouched();\r\n      return;\r\n    } else {\r\n      this.authService\r\n        .resetPassword(this.token, this.email, password, confirmPassword)\r\n        .subscribe((res) => {\r\n          if (res) {\r\n            this.router.navigate([this.LOGIN]);\r\n          }\r\n        });\r\n    }\r\n\r\n    this.errorMessage = errormsg;\r\n  }\r\n}\r\n", "<section class=\"update-password-section\">\r\n  <div class=\"centered-div mt-8 mb-6\">\r\n    <img\r\n      src=\"assets/favicons/update-password.svg\"\r\n      alt=\"Update Password Icon\"\r\n      class=\"input-icon mb-2\"\r\n    />\r\n    <p class=\"text-2xl font-semibold\">Update Password</p>\r\n  </div>\r\n\r\n  <form\r\n    [formGroup]=\"formGroup\"\r\n    (submit)=\"onResetPassword()\"\r\n    class=\"signup-section__form--form-element\"\r\n  >\r\n    <div class=\"mb-5\">\r\n      <p class=\"text-white text-sm text-center font-light mb-3\">\r\n        Update your password for enhanced security. A fresh start <br />awaits!\r\n      </p>\r\n      <div class=\"mb-2\">\r\n        <app-input-field\r\n          type=\"password\"\r\n          placeholder=\"Enter new password\"\r\n          class=\"flex-1\"\r\n          [formControlName]=\"'password'\"\r\n          [isInvalid]=\"\r\n            formGroup.get('password')?.invalid &&\r\n            formGroup.get('password')?.touched\r\n          \"\r\n          [isPassword]=\"true\"\r\n          [errorMessage]=\"errorMessage\"\r\n        >\r\n        </app-input-field>\r\n      </div>\r\n      <div class=\"mb-2\">\r\n        <app-input-field\r\n          type=\"password\"\r\n          placeholder=\"Confirm new password\"\r\n          class=\"flex-1\"\r\n          [formControlName]=\"'confirm_password'\"\r\n          [isInvalid]=\"\r\n            formGroup.get('confirm_password')?.invalid &&\r\n            formGroup.get('confirm_password')?.touched\r\n          \"\r\n          [isPassword]=\"true\"\r\n          [errorMessage]=\"errorMessage\"\r\n        >\r\n        </app-input-field>\r\n      </div>\r\n    </div>\r\n\r\n    <button\r\n      class=\"mb-12 mt-3 w-full text-sm text-white bg-tangerine border-0 py-2 px-6 focus:outline-none hover:bg-orange-800 rounded-lg\"\r\n      type=\"submit\"\r\n    >\r\n      Login\r\n    </button>\r\n  </form>\r\n</section>\r\n"],
  "mappings": "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",
  "names": []
}
