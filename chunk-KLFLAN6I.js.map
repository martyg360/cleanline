{
  "version": 3,
  "sources": ["src/app/helpers/browser-storage.service.ts", "package.json", "src/environments/environment.development.ts", "src/app/core/auth/services/auth/auth.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\n\nexport enum EStorageKeys {\n  TOKEN = 'access_token',\n  USER = 'user',\n  BREADCRUMB = 'breadcrumb',\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BrowserStorageService {\n  //SESSION STORAGE\n\n  public addToSessionStorage(key: EStorageKeys, data: any) {\n    sessionStorage.setItem(key, JSON.stringify(data));\n  }\n\n  public getFromSessionStorage<TModel>(key: EStorageKeys) {\n    const data = sessionStorage.getItem(key);\n    if (data) {\n      return JSON.parse(data) as TModel;\n    }\n    return null;\n  }\n\n  public clearSessionStorage(keys: EStorageKeys[]) {\n    if (keys === null) {\n      sessionStorage.clear();\n    } else {\n      keys.forEach((key) => sessionStorage.removeItem(key));\n    }\n  }\n\n  // LOCAL STORAGE\n\n  public addToLocalStorage(key: EStorageKeys, data: any) {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  public getFromLocalStorage<TModel>(key: EStorageKeys) {\n    const data = localStorage.getItem(key);\n    if (data) {\n      return JSON.parse(data) as TModel;\n    }\n    return null;\n  }\n\n  public clearLocalStorage(keys: EStorageKeys[]) {\n    if (keys === null) {\n      localStorage.clear();\n    } else {\n      keys.forEach((key) => localStorage.removeItem(key));\n    }\n  }\n}\n", "{\n  \"name\": \"cleantine-tasman-web\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\",\n    \"start:dev\": \"ng serve --configuration=development\",\n    \"start:prod\": \"ng serve --configuration=production\",\n    \"build:dev\": \"ng build --configuration=development\",\n    \"build:prod\": \"ng build --configuration=production\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"^18.2.0\",\n    \"@angular/cdk\": \"^18.2.8\",\n    \"@angular/common\": \"^18.2.0\",\n    \"@angular/compiler\": \"^18.2.0\",\n    \"@angular/core\": \"^18.2.0\",\n    \"@angular/forms\": \"^18.2.0\",\n    \"@angular/platform-browser\": \"^18.2.0\",\n    \"@angular/platform-browser-dynamic\": \"^18.2.0\",\n    \"@angular/router\": \"^18.2.0\",\n    \"@ngrx/store\": \"^18.1.0\",\n    \"@ngrx/store-devtools\": \"^18.1.0\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"postcss\": \"^8.4.47\",\n    \"rxjs\": \"~7.8.0\",\n    \"tailwindcss\": \"^3.4.13\",\n    \"tslib\": \"^2.3.0\",\n    \"zone.js\": \"~0.14.10\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"^18.2.1\",\n    \"@angular/cli\": \"^18.2.1\",\n    \"@angular/compiler-cli\": \"^18.2.0\",\n    \"@ngrx/schematics\": \"^18.1.0\",\n    \"@types/jasmine\": \"~5.1.0\",\n    \"jasmine-core\": \"~5.2.0\",\n    \"karma\": \"~6.4.0\",\n    \"karma-chrome-launcher\": \"~3.2.0\",\n    \"karma-coverage\": \"~2.2.0\",\n    \"karma-jasmine\": \"~5.1.0\",\n    \"karma-jasmine-html-reporter\": \"~2.1.0\",\n    \"typescript\": \"~5.5.2\"\n  }\n}\n", "// Packages\nimport packageInfo from '../../package.json';\n\nexport const environment = {\n  production: false,\n  version: packageInfo.version,\n  appName: 'Cleanline Tasman',\n  apiBaseUrl:\n    'https://cleanline-be-hsggamf9ggh7dycd.eastasia-01.azurewebsites.net/api',\n  locales: ['en'],\n  defaultLocale: 'en',\n};", "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { User } from '../../../../models/user.interface';\r\nimport { environment } from '../../../../../environments/environment';\r\nimport { Observable, tap } from 'rxjs';\r\nimport {\r\n  BrowserStorageService,\r\n  EStorageKeys,\r\n} from '../../../../helpers/browser-storage.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private apiUrl = environment.apiBaseUrl;\r\n\r\n  constructor(\r\n    private _http: HttpClient,\r\n    private browserStorageService: BrowserStorageService\r\n  ) {}\r\n\r\n  isAuthenticated(): boolean {\r\n    const token = this.browserStorageService.getFromLocalStorage<string>(\r\n      EStorageKeys.TOKEN\r\n    );\r\n    return !!token;\r\n  }\r\n\r\n  loginRequest(user: User) {\r\n    return this._http.post(`${this.apiUrl}/loginRequest`, user);\r\n  }\r\n\r\n  login(email: string, password: string) {\r\n    return this._http.post(`${this.apiUrl}/login`, { email, password }).pipe(\r\n      tap((res: any) => {\r\n        console.log('auth service ', res);\r\n\r\n        this.browserStorageService.addToLocalStorage(\r\n          EStorageKeys.TOKEN,\r\n          res.data.token.access_token\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    this.browserStorageService.clearLocalStorage([\r\n      EStorageKeys.USER,\r\n      EStorageKeys.TOKEN,\r\n      EStorageKeys.BREADCRUMB,\r\n    ]);\r\n  }\r\n\r\n  forgotPassword(email: string): Observable<any> {\r\n    return this._http.post(`${this.apiUrl}/forgot-password`, { email });\r\n  }\r\n\r\n  resetPassword(\r\n    token: string | null,\r\n    email: string | null,\r\n    password: string,\r\n    password_confirmation: string\r\n  ): Observable<any> {\r\n    return this._http.post(`${this.apiUrl}/reset-password`, {\r\n      token,\r\n      email,\r\n      password: password,\r\n      password_confirmation: password_confirmation,\r\n    });\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["EStorageKeys"]
}
